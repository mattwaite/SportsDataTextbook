{
  "hash": "9f9adc58be784e90def5bcb041301dc0",
  "result": {
    "markdown": "# Bump charts\n\nThe point of a bump chart is to show how the ranking of something changed over time -- you could do this with the top 25 in football or basketball. I've seen it done with European soccer league standings over a season. \n\nThe requirements are that you have a row of data for a team, in that week, with their rank.\n\nThis is another extension to ggplot, and you'll install it the usual way: `install.packages(\"ggbump\")`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggbump)\n```\n:::\n\n\nLet's use last season's college football playoff rankings (this year wasn't done as of this writing): \n\n\n<pre><p><strong>For this walkthrough:</strong></p><p><a href=\"http://mattwaite.github.io/sportsdatafiles/cfbranking.csv\">\n  <button class=\"btn btn-danger\"><i class=\"fa fa-save\"></i> Download csv file</button>\n</a></p></pre>\n\n::: {.cell}\n\n```{.r .cell-code}\nrankings <- read_csv(\"data/cfbranking.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 125 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Team, ShortTeam\ndbl (2): Rank, Week\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nGiven our requirements of a row of data for a team, in that week, with their rank, take a look at the data provided. We have 5 weeks of playoff rankings, so we should see a ranking, the week of the ranking and the team at that rank. You can see the basic look of the data by using head()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(rankings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n   Rank  Week Team    ShortTeam\n  <dbl> <dbl> <chr>   <chr>    \n1     1    17 Alabama Ala.     \n2     1    16 Alabama Ala.     \n3     1    15 Alabama Ala.     \n4     1    14 Alabama Ala.     \n5     1    13 Alabama Ala.     \n6    22    13 Auburn  Aub.     \n```\n:::\n:::\n\n\nSo Alabama was ranked in the first (yawn), followed by Clemson (double yawn), Ohio State and so on. Our data is in the form we need it to be. Now we can make a bump chart. We'll start simple.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_bump(\n    data=rankings, aes(x=Week, y=Rank, color=Team))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in f(...): 'StatBump' needs at least two observations per group\n\nWarning in f(...): 'StatBump' needs at least two observations per group\n\nWarning in f(...): 'StatBump' needs at least two observations per group\n```\n:::\n\n::: {.cell-output-display}\n![](bumpcharts_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nWell, it's a start. \n\nThe warning that you're seeing is that there's three teams last season who made one appearance on the college football playoff rankings and disappeared. Nebraska fans would bite your arm off for that. Alas. We should eliminate them and thin up our chart a little. Let's just take teams that finished in the top 10. We're going to use a neat filter trick for this that you learned earlier using %in%. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop10 <- rankings %>% filter(Week == 17 & Rank <= 10)\n\nnewrankings <- rankings %>% filter(Team %in% top10$Team)\n```\n:::\n\n\nNow you have something called newrankings that shows how teams who finished in the top 10 at the end of the season ended up there. And every team who finished in the top 10 in week 17 had been in the rankings more than once in the 5 weeks before. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_bump(\n    data=newrankings, aes(x=Week, y=Rank, color=Team))\n```\n\n::: {.cell-output-display}\n![](bumpcharts_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nFirst things first: I'm immediately annoyed by the top teams being at the bottom. I learned a neat trick from ggbump that's been in ggplot all along -- `scale_y_reverse()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_bump(\n    data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  scale_y_reverse()\n```\n\n::: {.cell-output-display}\n![](bumpcharts_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nBetter. But, still not great. Let's add a point at each week.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +\n  scale_y_reverse() \n```\n\n::: {.cell-output-display}\n![](bumpcharts_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nAnother step. That makes it more subway-map like. But the colors are all wrong. To fix this, we're going to use `scale_color_manual` and we're going to Google the hex codes for each team. The legend will tell you what order your `scale_color_manual` needs to be.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) + \n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_y_reverse() \n```\n\n::: {.cell-output-display}\n![](bumpcharts_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nAnother step. But the legend is annoying. And trying to find which red is Alabama vs Ohio State is hard. So what if we labeled each dot at the beginning and end? We can do that with some clever usage of geom_text and a little dplyr filtering inside the data step. We filter out the first and last weeks, then use hjust -- horizontal justification -- to move them left or right. \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings %>% filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = Team), size = 3, hjust = 1) +\n  geom_text(data = newrankings %>% filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = Team), size = 3, hjust = 0) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_y_reverse() \n```\n\n::: {.cell-output-display}\n![](bumpcharts_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nBetter, but the legend is still there. We can drop it in a theme directive by saying `legend.position = \"none\"`. We'll also throw a theme_minimal on there to drop the default grey, and we'll add some better labeling.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings %>% filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = ShortTeam), size = 3, hjust = 1) +\n  geom_text(data = newrankings %>% filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = ShortTeam), size = 3, hjust = 0) +\n  labs(title=\"Was COVID college football boring?\", subtitle=\"There was no drama at the top. None. So, yes?\", y= \"Rank\", x = \"Week\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank()\n    ) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_y_reverse() \n```\n\n::: {.cell-output-display}\n![](bumpcharts_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nNow let's fix our text hierarchy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings %>% filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = ShortTeam), size = 3, hjust = 1) +\n  geom_text(data = newrankings %>% filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = ShortTeam), size = 3, hjust = 0) +\n  labs(title=\"Was COVID college football boring?\", subtitle=\"There was no drama at the top. None. So, yes?\", y= \"Rank\", x = \"Week\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_y_reverse() \n```\n\n::: {.cell-output-display}\n![](bumpcharts_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nAnd the last thing: anyone else annoyed at 7.5th place on the left? We can fix that too by specifying the breaks in scale_y_reverse. We can do that with the x axis as well, but since we haven't reversed it, we do that in `scale_x_continuous` with the same breaks. Also: forgot my source and credit line. \n\nOne last thing: Let's change the width of the chart to make the names fit. We can do that by adding `fig.width=X` in the `{r}` setup in your block. So something like this: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_bump(data=newrankings, aes(x=Week, y=Rank, color=Team)) + \n  geom_point(data=newrankings, aes(x=Week, y=Rank, color=Team), size = 4) +   \n  geom_text(data = newrankings %>% filter(Week == min(Week)), aes(x = Week - .2, y=Rank, label = ShortTeam), size = 3, hjust = 1) +\n  geom_text(data = newrankings %>% filter(Week == max(Week)), aes(x = Week + .2, y=Rank, label = ShortTeam), size = 3, hjust = 0) +\n  labs(title=\"Was COVID college football boring?\", subtitle=\"There was no drama at the top. None. So, yes?\", y= \"Rank\", x = \"Week\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  scale_color_manual(values = c(\"#9E1B32\",\"#E00122\", \"#F56600\", \"#0021A5\", \"#BA0C2F\", \"#F1BE48\",\"#C99700\", \"#bb0000\", \"#841617\", \"#500000\")) +\n  scale_x_continuous(breaks=c(13,14,15,16,17)) + \n  scale_y_reverse(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))\n```\n\n::: {.cell-output-display}\n![](bumpcharts_files/figure-html/unnamed-chunk-14-1.png){width=864}\n:::\n:::\n",
    "supporting": [
      "bumpcharts_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}