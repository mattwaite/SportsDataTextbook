{
  "hash": "45e5836d1a4e16c13c0aa45f2ee726d5",
  "result": {
    "markdown": "# Using packages to get data\n\nThere is a growing number of packages and repositories of sports data, largely because there's a growing number of people who want to analyze that data. We've [done it ourselves with simple Google Sheets tricks](http://mattwaite.github.io/sports/data-structures-and-types.html#a-simple-way-to-get-data). Then there's [RVest, which is a method of scraping the data yourself from websites](http://mattwaite.github.io/sports/intro-to-rvest.html). But with these packages, someone has done the work of gathering the data for you. All you have to learn are the commands to get it.\n\nOne very promising collection of libraries is something called the [SportsDataverse](https://sportsdataverse.org/), which has a collection of packages covering specific sports, all of which are in various stages of development. Some are more complete than others, but they are all being actively worked on by developers. Packages of interest in this class are:\n\n-   [cfbfastR, for college football](https://saiemgilani.github.io/cfbfastR/).\n-   [hoopR, for men's professional and college basketball](https://saiemgilani.github.io/hoopR/).\n-   [wehoop, for women's professional and college basketball](https://saiemgilani.github.io/wehoop/).\n-   [baseballr, for professional and college baseball](https://billpetti.github.io/baseballr/).\n-   [worldfootballR, for soccer data from around the world](https://jaseziv.github.io/worldfootballR/).\n-   [hockeyR, for NHL hockey data](https://hockeyr.netlify.app/)\n-   [recruitR, for college sports recruiting](https://saiemgilani.github.io/recruitR/)\n\nNot part of the SportsDataverse, but in the same neighborhood, is [nflfastR](https://www.nflfastr.com/), which can provide NFL play-by-play data.\n\nBecause they're all under development, not all of them can be installed with just a simple `install.packages(\"something\")`. Some require a little work, some require API keys.\n\nThe main issue for you is to read the documentation carefully.\n\n## Using cfbfastR as a cautionary tale\n\ncfbfastR presents us a good view into the promise and peril of libraries like this.\n\n[First, to make this work, follow the installation instructions](https://saiemgilani.github.io/cfbfastR/) and then follow how to get an API key from College Football Data and how to add that to your environment. But maybe wait to do that until you read the whole section.\n\nAfter installations, we can load it up.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(cfbfastR)\n```\n:::\n\n\n\nYou might be thinking, \"Oh wow, I can get play by play data for college football. Let's look at what are the five most heartbreaking plays of this doomed Nebraska season.\" Because what better way to determine doom than by looking at the steepest dropoff in win probability, which is included in the data.\n\nGreat idea. Let's do it.\n\nThe first thing to do is [read the documentation](https://saiemgilani.github.io/cfbfastR/reference/cfbd_pbp_data.html). You'll see that you can request data for each week. For example, here's week 2, which is actually Nebraska's third game (the week 0 game is lumped in with week 1).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnebraska <- cfbd_pbp_data(\n 2021,\n  week=2, \n  season_type = \"regular\",\n  team = \"Nebraska\",\n  epa_wpa = TRUE,\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n* 09:47:37 | Start processing of 1 game...\n```\n:::\n:::\n\n\n\nThere's not an easy way to get all of a single team's games. A way to do it that's not very pretty but it works is like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwk1 <- cfbd_pbp_data(2021, week=1, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk2 <- cfbd_pbp_data(2021, week=2, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk3 <- cfbd_pbp_data(2021, week=3, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk4 <- cfbd_pbp_data(2021, week=4, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk5 <- cfbd_pbp_data(2021, week=5, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk6 <- cfbd_pbp_data(2021, week=6, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk7 <- cfbd_pbp_data(2021, week=7, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk9 <- cfbd_pbp_data(2021, week=9, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\nSys.sleep(2)\nwk10 <- cfbd_pbp_data(2021, week=10, season_type = \"regular\", team = \"Nebraska\", epa_wpa = TRUE)\n\nnuplays <- bind_rows(wk1, wk2, wk3, wk4, wk5, wk6, wk7, wk9, wk10)\n```\n:::\n\n\n\nThe sys.sleep bits just pauses for two seconds before running the next block. Since we're requesting data from someone else's computer, we want to be kind. Week 8 was a bye week for Nebraska, so if you request it, you'll get an empty request and a warning. The `bind_rows` parts puts all the dataframes into a single dataframe.\n\nNow you're ready to look at heartbreak. How do we define heartbreak? How about like this: you first have to lose the game, it comes in the third or fourth quarter, it involves a play (i.e. not a timeout), and it results in the biggest drop in win probability.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnuplays |> \n  filter(pos_team == \"Nebraska\" & def_pos_team != \"Fordham\" & def_pos_team != \"Buffalo\" & def_pos_team != \"Northwestern\" & play_type != \"Timeout\") |> \n  filter(period == 3 | period == 4) |> \n  mutate(HeartbreakLevel = wp_before - wp_after) |> \n  arrange(desc(HeartbreakLevel)) |> \n  top_n(5, wt=HeartbreakLevel) |>\n  select(period, clock.minutes, def_pos_team, play_type, play_text)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- play-by-play data from CollegeFootballData.com ------------ cfbfastR 1.9.0 --\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni Data updated: 2023-12-27 09:47:40 CST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 5\n  period clock.minutes def_pos_team   play_type                  play_text      \n   <int>         <int> <chr>          <chr>                      <chr>          \n1      4             1 Michigan       Fumble Recovery (Opponent) Adrian Martine~\n2      4             1 Michigan State Punt                       William Przyst~\n3      4            14 Michigan State Sack                       Adrian Martine~\n4      3            10 Purdue         Interception Return        Adrian Martine~\n5      4             3 Michigan State Punt Return Touchdown      Daniel Cerni p~\n```\n:::\n:::\n\n\n\nThe most heartbreaking play of the season? A fourth quarter fumble against Michigan. Next up: Basically the entire fourth quarter against Michigan State.\n\n## Another example\n\nThe wehoop package is mature enough to have a version on CRAN, so you can install it the usual way with `install.packages(\"wehoop\")`. Another helpful library to install is progressr with `install.packages(\"progressr\")`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(wehoop)\n```\n:::\n\n\n\nMany of these libraries have more than play-by-play data. For example, wehoop has box scores and player data for both the WNBA and college basketball. From personal experience, WNBA data isn't hard to get, but women's college basketball is a giant pain.\n\nSo, who is Nebraska's single season points champion over the last five seasons?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprogressr::with_progress({\n  wbb_player_box <- wehoop::load_wbb_player_box(2017:2021)\n})\n```\n:::\n\n\n\nWith progressr, you'll see a progress bar in the console, which lets you know that your command is still working, since some of these requests take minutes to complete. Player box scores is quicker -- five seasons was a matter of seconds.\n\nIf you look at the wbb_player_box data we now have, we have each player in each game over each season -- more than 300,000 records. Finding out who Nebraska's top 10 single-season scoring leaders are is a matter of grouping, summing and filtering.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwbb_player_box |> \n  filter(team_short_display_name == \"Nebraska\") |> \n  group_by(athlete_display_name, season) |> \n  summarise(totalPoints = sum(as.numeric(points))) |> \n  arrange(desc(totalPoints)) |>\n  ungroup() |>\n  top_n(10, wt=totalPoints)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 3\n   athlete_display_name season totalPoints\n   <chr>                 <int>       <dbl>\n 1 Jessica Shepard        2017         538\n 2 Sam Haiby              2021         438\n 3 Leigha Brown           2020         433\n 4 Hannah Whitish         2018         403\n 5 Kate Cain              2018         316\n 6 Sam Haiby              2020         300\n 7 Hannah Whitish         2019         292\n 8 Sam Haiby              2019         285\n 9 Leigha Brown           2019         280\n10 Kate Cain              2020         278\n```\n:::\n:::\n\n\n\nThis just in: Sam Haiby is good at basketball.\n",
    "supporting": [
      "usingpackages_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}