{
  "hash": "e4a6c8e6dd904810a55b620f1558e1cf",
  "result": {
    "markdown": "# Stacked bar charts\n\nOne of the elements of data visualization excellence is **inviting comparison**. Often that comes in showing **what proportion a thing is in relation to the whole thing**. With bar charts, we're showing magnitude of the whole thing. If we have information about the parts of the whole, **we can stack them on top of each other to compare them, showing both the whole and the components**. And it's a simple change to what we've already done. \n\nWe're going to use a dataset of college football games from this season. \n\n\n\n<pre><p><strong>For this walkthrough:</strong></p><p><a href=\"http://mattwaite.github.io/sportsdatafiles/footballlogs20.csv\">\n  <button class=\"btn btn-danger\"><i class=\"fa fa-save\"></i> Download csv file</button>\n</a></p></pre>\n\n\n\nLoad the tidyverse.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nAnd the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfootball <- read_csv(\"data/footballlogs20.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1100 Columns: 54\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n\nWhat we have here is every game in college football this season. The question we want to answer is this: Who had the most prolific offenses in the Big Ten? And how did they get there? \n\nSo to make this chart, we have to just add one thing to a bar chart like we did in the previous chapter. However, it's not that simple.\n\nWe have game data, and we need season data. To get that, we need to do some group by and sum work. And since we're only interested in the Big Ten, we have some filtering to do too. For this, we're going to measure offensive production by rushing yards and passing yards. So if we have all the games a team played, and the rushing and passing yards for each of those games, what we need to do to get the season totals is just add them up.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfootball %>% \n  group_by(Conference, Team) %>% \n  summarise(\n    SeasonRushingYards = sum(RushingYds),\n    SeasonPassingYards = sum(PassingYds),\n  ) %>% filter(Conference == \"Big Ten Conference\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'Conference'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 x 4\n# Groups:   Conference [1]\n   Conference         Team           SeasonRushingYards SeasonPassingYards\n   <chr>              <chr>                       <dbl>              <dbl>\n 1 Big Ten Conference Illinois                     1569               1223\n 2 Big Ten Conference Indiana                       894               2007\n 3 Big Ten Conference Iowa                         1368               1581\n 4 Big Ten Conference Maryland                      722               1320\n 5 Big Ten Conference Michigan                      786               1502\n 6 Big Ten Conference Michigan State                635               1672\n 7 Big Ten Conference Minnesota                    1343               1394\n 8 Big Ten Conference Nebraska                     1611               1521\n 9 Big Ten Conference Northwestern                 1465               1781\n10 Big Ten Conference Ohio State                   1908               1906\n11 Big Ten Conference Penn State                   1569               2304\n12 Big Ten Conference Purdue                        489               1854\n13 Big Ten Conference Rutgers                      1259               1786\n14 Big Ten Conference Wisconsin                    1152               1267\n```\n:::\n:::\n\n\n\nBy looking at this, we can see we got what we needed. We have 14 teams and numbers that look like season totals for yards. Save that to a new dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfootball %>% \n  group_by(Conference, Team) %>% \n  summarise(\n    SeasonRushingYards = sum(RushingYds),\n    SeasonPassingYards = sum(PassingYds),\n  ) %>% filter(Conference == \"Big Ten Conference\") -> yards\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'Conference'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n\n\nNow, the problem we have is that ggplot wants long data and this data is wide. So we need to use `tidyr` to make it long, just like we did in the transforming data chapter.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyards %>% \n  pivot_longer(\n    cols=starts_with(\"Season\"), \n    names_to=\"Type\", \n    values_to=\"Yards\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 28 x 4\n# Groups:   Conference [1]\n   Conference         Team     Type               Yards\n   <chr>              <chr>    <chr>              <dbl>\n 1 Big Ten Conference Illinois SeasonRushingYards  1569\n 2 Big Ten Conference Illinois SeasonPassingYards  1223\n 3 Big Ten Conference Indiana  SeasonRushingYards   894\n 4 Big Ten Conference Indiana  SeasonPassingYards  2007\n 5 Big Ten Conference Iowa     SeasonRushingYards  1368\n 6 Big Ten Conference Iowa     SeasonPassingYards  1581\n 7 Big Ten Conference Maryland SeasonRushingYards   722\n 8 Big Ten Conference Maryland SeasonPassingYards  1320\n 9 Big Ten Conference Michigan SeasonRushingYards   786\n10 Big Ten Conference Michigan SeasonPassingYards  1502\n# ... with 18 more rows\n```\n:::\n:::\n\n\n\nWhat you can see now is that we have two rows for each team: One for rushing yards, one for passing yards. This is what ggplot needs. Save it to a new dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyards %>% \n  pivot_longer(\n    cols=starts_with(\"Season\"), \n    names_to=\"Type\", \n    values_to=\"Yards\") -> yardswide\n```\n:::\n\n\n\nBuilding on what we learned in the last chapter, we know we can turn this into a bar chart with an x value, a weight and a geom_bar. What we are going to add is a `fill`. The `fill` will stack bars on each other based on which element it is. In this case, we can fill the bar by Type, which means it will stack the number of rushing yards on top of passing yards and we can see how they compare. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_bar(\n    data=yardswide, \n    aes(x=Team, weight=Yards, fill=Type)) + \n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](stackedbars_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWhat's the problem with this chart? \n\nThere's a couple of things, one of which we'll deal with now: The ordering is alphabetical (from the bottom up). So let's `reorder` the teams by Yards.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_bar(\n    data=yardswide, \n    aes(x=reorder(Team, Yards), \n        weight=Yards, \n        fill=Type)) + \n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](stackedbars_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nAnd just like that ... Penn State comes out on top? Huh. And look who is fourth.\n\nWhat else is the problem here? Hint: there was a global pandemic going on.\n",
    "supporting": [
      "stackedbars_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}