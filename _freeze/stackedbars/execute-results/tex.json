{
  "hash": "240f64ea4b07eca19efd9cf7876f9e36",
  "result": {
    "markdown": "# Stacked bar charts\n\nOne of the elements of data visualization excellence is **inviting comparison**. Often that comes in showing **what proportion a thing is in relation to the whole thing**. With bar charts, we're showing magnitude of the whole thing. If we have information about the parts of the whole, **we can stack them on top of each other to compare them, showing both the whole and the components**. And it's a simple change to what we've already done.\n\nWe're going to use a dataset of college basketball games from this past season.\n\n\n\n<pre><p><strong>For this walkthrough:</strong></p><p><a href=\"http://mattwaite.github.io/sportsdatafiles/logs22.csv\">\n  <button class=\"btn btn-danger\"><i class=\"fa fa-save\"></i> Download csv file</button>\n</a></p></pre>\n\n\n\nLoad the tidyverse.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nAnd the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngames <- read_csv(\"data/logs22.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 10775 Columns: 48\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr   (8): Season, TeamFull, Opponent, HomeAway, W_L, URL, Conference, Team\ndbl  (39): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\ndate  (1): Date\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n\nWhat we have here is every game in college football this season. The question we want to answer is this: Who had the most prolific offenses in the Big Ten? And how did they get there?\n\nSo to make this chart, we have to just add one thing to a bar chart like we did in the previous chapter. However, it's not that simple.\n\nWe have game data, and we need season data. To get that, we need to do some group by and sum work. And since we're only interested in the Big Ten, we have some filtering to do too. For this, we're going to measure offensive production by rushing yards and passing yards. So if we have all the games a team played, and the rushing and passing yards for each of those games, what we need to do to get the season totals is just add them up.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngames |> \n  group_by(Conference, Team) |> \n  summarise(\n    SeasonOffRebounds = sum(TeamOffRebounds),\n    SeasonTotalRebounds = sum(TeamTotalRebounds)\n  ) |>\n  mutate(\n    SeasonDefRebounds = SeasonTotalRebounds - SeasonOffRebounds\n  ) |> \n  select(\n    -SeasonTotalRebounds\n  ) |> \n  filter(Conference == \"Big Ten\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 x 4\n# Groups:   Conference [1]\n   Conference Team           SeasonOffRebounds SeasonDefRebounds\n   <chr>      <chr>                      <dbl>             <dbl>\n 1 Big Ten    Illinois                     300               764\n 2 Big Ten    Indiana                      228               770\n 3 Big Ten    Iowa                         333               742\n 4 Big Ten    Maryland                     256               767\n 5 Big Ten    Michigan                     265               721\n 6 Big Ten    Michigan State               268               774\n 7 Big Ten    Minnesota                    132               674\n 8 Big Ten    Nebraska                     196               762\n 9 Big Ten    Northwestern                 226               715\n10 Big Ten    Ohio State                   225               706\n11 Big Ten    Penn State                   224               707\n12 Big Ten    Purdue                       295               794\n13 Big Ten    Rutgers                      267               715\n14 Big Ten    Wisconsin                    240               730\n```\n:::\n:::\n\n\n\nBy looking at this, we can see we got what we needed. We have 14 teams and numbers that look like season totals for two types of rebounds. Save that to a new dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngames |> \n  group_by(Conference, Team) |> \n  summarise(\n    SeasonOffRebounds = sum(TeamOffRebounds),\n    SeasonTotalRebounds = sum(TeamTotalRebounds)\n  ) |>\n  mutate(\n    SeasonDefRebounds = SeasonTotalRebounds - SeasonOffRebounds\n  ) |> \n  select(\n    -SeasonTotalRebounds\n  ) |> \n  filter(Conference == \"Big Ten\") -> rebounds\n```\n:::\n\n\n\nNow, the problem we have is that ggplot wants long data and this data is wide. So we need to use `tidyr` to make it long, just like we did in the transforming data chapter.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrebounds |> \n  pivot_longer(\n    cols=starts_with(\"Season\"), \n    names_to=\"Type\", \n    values_to=\"Rebounds\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 28 x 4\n# Groups:   Conference [1]\n   Conference Team     Type              Rebounds\n   <chr>      <chr>    <chr>                <dbl>\n 1 Big Ten    Illinois SeasonOffRebounds      300\n 2 Big Ten    Illinois SeasonDefRebounds      764\n 3 Big Ten    Indiana  SeasonOffRebounds      228\n 4 Big Ten    Indiana  SeasonDefRebounds      770\n 5 Big Ten    Iowa     SeasonOffRebounds      333\n 6 Big Ten    Iowa     SeasonDefRebounds      742\n 7 Big Ten    Maryland SeasonOffRebounds      256\n 8 Big Ten    Maryland SeasonDefRebounds      767\n 9 Big Ten    Michigan SeasonOffRebounds      265\n10 Big Ten    Michigan SeasonDefRebounds      721\n# i 18 more rows\n```\n:::\n:::\n\n\n\nWhat you can see now is that we have two rows for each team: One for rushing yards, one for passing yards. This is what ggplot needs. Save it to a new dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrebounds |> \n  pivot_longer(\n    cols=starts_with(\"Season\"), \n    names_to=\"Type\", \n    values_to=\"Rebounds\") -> reboundswide\n```\n:::\n\n\n\nBuilding on what we learned in the last chapter, we know we can turn this into a bar chart with an x value, a weight and a geom_bar. What we are going to add is a `fill`. The `fill` will stack bars on each other based on which element it is. In this case, we can fill the bar by Type, which means it will stack the number of rushing yards on top of passing yards and we can see how they compare.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_bar(\n    data=reboundswide, \n    aes(x=Team, weight=Rebounds, fill=Type)) + \n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](stackedbars_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWhat's the problem with this chart?\n\nThere's a couple of things, one of which we'll deal with now: The ordering is alphabetical (from the bottom up). So let's `reorder` the teams by Rebounds.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_bar(\n    data=reboundswide, \n    aes(x=reorder(Team, Rebounds), \n        weight=Rebounds, \n        fill=Type)) + \n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](stackedbars_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nAnd just like that ... Purdue comes out on top? Huh. And look who is not last.\n",
    "supporting": [
      "stackedbars_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}