{
  "hash": "374eb372692f64c5c603fddfe8ea41d4",
  "result": {
    "markdown": "# Bubble charts\n\nHere is the real talk: Bubble charts are hard. The reason they are hard is not because of the code, or the complexity or anything like that. They're a scatterplot with magnitude added -- the size of the dot in the scatterplot has meaning. The hard part is seeing when a bubble chart works and when it doesn't. \n\nIf you want to see it work spectacularly well, [watch a semi-famous Ted Talk](https://www.youtube.com/watch?v=hVimVzgtD6w) by Hans Rosling from 2006 where bubble charts were the centerpiece. It's worth watching. It'll change your perspective on the world. No seriously. It will.\n\nAnd since then, people have wanted bubble charts. And we're back to the original problem: They're hard. There's a finite set of circumstances where they work. \n\nFirst, I'm going to show you an example of them not working to illustrate the point. \n\nI'm going to load up my libraries. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nSo for this example, I want to look at where Big Ten teams compare to the rest of college football last season. Is the Big Ten's reputation for tough games and defenses earned? Can we see patterns in good team vs bad teams? \n\nI'm going to create a scatterplot with offensive yards per play on the X axis and defensive yards per play on the y axis. We can then divide the grid into four quadrants. Teams with high yards per offensive play and low defensive yards per play are teams with good offenses and good defenses. The opposite means bad defense, bad offense. Then, to drive the point home, I'm going to make the dot the size of the total wins on the season -- the bubble in my bubble charts. \n\nWe'll use this season's college football games. \n\n\n\n\n<pre><p><strong>For this walkthrough:</strong></p><p><a href=\"http://mattwaite.github.io/sportsdatafiles/footballlogs21.csv\">\n  <button class=\"btn btn-danger\"><i class=\"fa fa-save\"></i> Download csv file</button>\n</a></p></pre>\n\n\n\n\nAnd load it.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogs <- read_csv(\"data/footballlogs21.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 740 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n\n\nTo do this, I've got some work to do. First, I need to mutate the outcomes of the games into 1s and 0s so I can add up the wins. We've done this before, so this won't be new to you, just adjusted slightly from basketball data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinlosslogs <- logs %>% \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n```\n:::\n\n\n\n\nNow I have some more work to do. My football logs data has the yards per play of each game, and I could average those together and get something very close to what I'm going to do, but averaging each games yards per play is not the same thing as calculating it, so we're going to calculate it. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinlosslogs %>% \n  group_by(Team, Conference) %>% \n  summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards), \n    TotalWins = sum(wins)) %>% \n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -> ypp\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'Team'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n\n\n\nA bubble chart is just a scatterplot with one additional element in the aesthetic -- a size. Here's the scatterplot version. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_point(\n    data=ypp, aes(x=OffensiveYPP, y=DefensiveYPP)\n    )\n```\n\n::: {.cell-output-display}\n![](bubblecharts_files/figure-epub/unnamed-chunk-6-1.png)\n:::\n:::\n\n\n\n\nLooks kind of random, eh? In this case, that's not that bad because we're not claiming a relationship. We're saying the location on the chart has meaning. So, do teams on the bottom right -- good offense, good defense -- win more games? \n\nLet's add the size element.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins)\n    )\n```\n\n::: {.cell-output-display}\n![](bubblecharts_files/figure-epub/unnamed-chunk-7-1.png)\n:::\n:::\n\n\n\n\nWhat does this chart tell you? We can see a general pattern that there are more big dots on the bottom right than the upper left. But we can make this more readable by adding an alpha element outside the aesthetic -- alpha in this case is transparency -- and we can manually change the size of the dots by adding `scale_size` and a `range`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins),\n    alpha = .3) + \n  scale_size(range = c(3, 8), name=\"Wins\")\n```\n\n::: {.cell-output-display}\n![](bubblecharts_files/figure-epub/unnamed-chunk-8-1.png)\n:::\n:::\n\n\n\n\nAnd by now, you now know to add in the Big Ten as a layer, I would hope.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbigten <- ypp %>% filter(Conference == \"Big Ten Conference\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\")\n```\n\n::: {.cell-output-display}\n![](bubblecharts_files/figure-epub/unnamed-chunk-10-1.png)\n:::\n:::\n\n\n\n\nLet's add some things to this chart to help us out. First, let's add lines that show us the average of all teams for those two metrics. So first, we need to calculate those. Because I have grouped data, it's going to require me to ungroup it so I can get just the total average of those two numbers. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nypp %>% \n  ungroup() %>% \n  summarise(\n    offense = mean(OffensiveYPP), \n    defense = mean(DefensiveYPP)\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  offense defense\n    <dbl>   <dbl>\n1    5.87    5.52\n```\n:::\n:::\n\n\n\n\nNow we can use those averages to add two more geoms -- geom_vline and geom_hline, for vertical lines and horizontal lines. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.863151) + \n  geom_hline(yintercept = 5.448228)\n```\n\n::: {.cell-output-display}\n![](bubblecharts_files/figure-epub/unnamed-chunk-12-1.png)\n:::\n:::\n\n\n\n\nNow, let's add another new geom for us, using a new library called `ggrepel`, which will help us label the dots without overwriting other labels. So we'll have to install that in the console:\n\n`install.packages(\"ggrepel\")\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggrepel)\n```\n:::\n\n\n\n\nAnd with that, we can add labels to the dots. The `geom_text_repel` is pretty much the exact same thing as your Big Ten geom point, but instead of a size, you include a label.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.863151) + \n  geom_hline(yintercept = 5.448228) +\n  geom_text_repel(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Team)\n  )\n```\n\n::: {.cell-output-display}\n![](bubblecharts_files/figure-epub/unnamed-chunk-14-1.png)\n:::\n:::\n\n\n\nWell, what do you know about that? Nebraska was ... really a mixed bag this season.\n\nAll that's left is some labels and some finishing touches. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + \n  geom_vline(xintercept = 5.863151) + \n  geom_hline(yintercept = 5.448228) +\n  geom_text_repel(\n    data=bigten, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Team)\n  ) +\n  labs(title=\"Is Nebraska moving up to the Big Ten's best?\", subtitle=\"The Huskers offense and defense puts it among ranked teams in the conference.\", caption=\"Source: NCAA | By Matt Waite\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](bubblecharts_files/figure-epub/unnamed-chunk-15-1.png)\n:::\n:::\n",
    "supporting": [
      "bubblecharts_files/figure-epub"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": {},
    "postProcess": true
  }
}